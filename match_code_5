/*----------------------------------------------------------------------------*/
/*                                                                            */
/*    Module:       main.cpp                                                  */
/*    Author:       VEX                                                       */
/*    Created:      Thu Sep 26 2019                                           */
/*    Description:  Competition Template                                      */
/*                                                                            */
/*----------------------------------------------------------------------------*/
// ---- START VEXCODE CONFIGURED DEVICES ----
// Robot Configuration:
// [Name]               [Type]        [Port(s)]
// Controller1          controller                   
// FrontRight           motor         1              
// BackRight            motor         10             
// FrontLeft            motor         11             
// BackLeft             motor         20             
// Teeth                motor         2              
// ---- END VEXCODE CONFIGURED DEVICES ----
#include "vex.h"
using namespace vex;
// A global instance of competition
competition Competition;
// define your global instances of motors and other devices here
/*---------------------------------------------------------------------------*/
/*                          Pre-Autonomous Functions                         */
/*                                                                           */
/*  You may want to perform some actions before the competition starts.      */
/*  Do them in the following function.  You must return from this function   */
/*  or the autonomous and usercontrol tasks will not be started.  This       */
/*  function is only called once after the V5 has been powered on and        */
/*  not every time that the robot is disabled.                               */
/*---------------------------------------------------------------------------*/
void pre_auton(void) {
// Initializing Robot Configuration. DO NOT REMOVE!
vexcodeInit();
// All activities that occur before the competition starts
// Example: clearing encoders, setting servo positions, ...
}
/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              Autonomous Task                              */
/*                                                                           */
/*  This task is used to control your robot during the autonomous phase of   */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/
void autonomous(void) {
FrontRight.spinFor(directionType::fwd,-8.1,rev,false);
BackRight.spinFor(directionType::fwd,-8.1,rev,false);
FrontLeft.spinFor(directionType::fwd,-8.1,rev,false);
BackLeft.spinFor(directionType::fwd,-8.1,rev,false);
 
wait(.5,seconds);
 
Teeth.spinFor(directionType::fwd,-.4,rev,false);
wait(.5, seconds);
 
FrontRight.spinFor(directionType::rev,8.1,rev,false);
BackRight.spinFor(directionType::rev,8.1,rev,false);
FrontLeft.spinFor(directionType::rev,8.1,rev,false);
BackLeft.spinFor(directionType::rev,8.1,rev,false);
 
 
// ..........................................................................
// Insert autonomous user code here.
// ..........................................................................
}
/*---------------------------------------------------------------------------*/
/*                                                                           */
/*                              User Control Task                            */
/*                                                                           */
/*  This task is used to control your robot during the user control phase of */
/*  a VEX Competition.                                                       */
/*                                                                           */
/*  You must modify the code to add your own robot specific commands here.   */
/*---------------------------------------------------------------------------*/
void usercontrol(void) {
  while (1) {
BackLeft.spin(directionType::fwd,(Controller1.Axis2.value()+Controller1.Axis1.value()),velocityUnits::pct);// back left motor is spinning forward, being controlled by axis 3 and 4 on controller1
BackRight.spin(directionType::fwd,(Controller1.Axis2.value()-Controller1.Axis1.value()),velocityUnits::pct);// back right motor is spinning forward, being controlled by axis 3 and 4 on controller1
FrontLeft.spin(directionType::fwd,(Controller1.Axis2.value()+Controller1.Axis1.value()),velocityUnits::pct);// front left motor is spinning forward, being controlled by axis 3 and 4 on controller1
FrontRight.spin(directionType::fwd,(Controller1.Axis2.value()-Controller1.Axis1.value()),velocityUnits::pct);//
 
//intake
if (Controller1.ButtonR1.pressing()){
Teeth.spin(directionType::fwd,25,velocityUnits::pct);//
}
else if (Controller1.ButtonR2.pressing()){
Teeth.spin(directionType::rev,25,velocityUnits::pct);//
}
else{
Teeth.stop(brakeType::hold);//
 
}
 
// User control code here, inside the loo
  // This is the main execution loop for the user control program.
  // Each time through the loop your program should update motor + servo
  // values based on feedback from the joysticks.
  // ........................................................................
  // Insert user code here. This is where you use the joystick values to
  // update your motors, etc.
  // ........................................................................
  wait(20, msec); // Sleep the task for a short amount of time to
                  // prevent wasted resources.
}
}
//
// Main will set up the competition functions and callbacks.
//
int main() {
// Set up callbacks for autonomous and driver control periods.
Competition.autonomous(autonomous);
Competition.drivercontrol(usercontrol);
// Run the pre-autonomous function.
pre_auton();
// Prevent main from exiting with an infinite loop.
while (true) {
  wait(100, msec);
}
}
